<?xml version="1.0" encoding="UTF-8"?>


<launch>

<!-- use cam_pos_x = -.1 when using with sensor suite. Change in TF below as well -->
<include  file="$(find zed_wrapper)/launch/zed2.launch">
	<arg name="publish_tf"       value="true"/>
	<arg name="cam_pos_x"        value="0"/>
	<arg name="cam_pos_z"        value="0"/>
	<arg name="cam_yaw"          value="-3.14159"/>
</include>



<!-- realsense launch with params -->
<include  file="$(find realsense2_camera)/launch/rs_camera.launch">
	<arg name="align_depth"       value="true"/>
	<arg name="unite_imu_method"  value="linear_interpolation"/>
	<arg name="enable_gyro"       value="true"/>
	<arg name="enable_accel"      value="true"/>
</include>


<!--  dingo's Lidar 
<include  file="$(find ouster_ros)/os1.launch">
	<arg name="os1_hostname"     value="192.168.1.142"/>  
	<arg name="os1_udp_dest"     value="192.168.1.108"/>
	<arg name="lidar_mode"       value="2048x10"/>
	<arg name="viz"              value="false"/>
</include>
-->

<!-- <arg name="os1_hostname"     value="192.168.1.149"/>  Yongming's Lidar  -->





  <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster_realsense" args="0 0 0 0 0 0 base_link camera_link" />
<!-- transforms-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster_zed" args="0 0 0 -3.14159 0 0 base_link zed2_camera_center" />

<!--
  <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster_lidar" args="-.035 0 .045 0 0 0 base_link os1_sensor" />
-->


<!-- UKF fusion for odometrys
<include  file="$(find robot_localization)/launch/ekf_dingo.launch">
</include>
 -->


<!-- Publishes rgbd_image from realsense camera stream-->
<node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="screen">
  <remap from="rgb/image"       to="/camera/color/image_raw"/>
  <remap from="depth/image"     to="/camera/aligned_depth_to_color/image_raw"/>
  <remap from="rgb/camera_info" to="/camera/color/camera_info"/>   
  <remap from="rgbd_image"       to="rgbd_image"/>
  <param name="approx_sync"       value="false"/> 
</node>


<!-- Estimates odometrys visually from the rgbd_image from last node -->
<node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
  <param name="subscribe_rgbd" type="bool"   value="true"/>
  <param name="frame_id"       type="string" value="base_link"/>
  <remap from="rgbd_image" to="rgbd_image"/>
   <param name="publish_tf"       type="bool" value="false"/>
</node>


<!-- main rtab map node-->
<node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start">
      <param name="frame_id"        type="string" value="base_link"/>
      <param name="subscribe_depth" type="bool"   value="false"/>
      <param name="subscribe_rgbd"  type="bool"   value="true"/>
      <param name="subscribe_rgb"        type="bool" value="false"/>
      <param name="subscribe_scan_cloud"  type="bool"   value="false"/>  <!-- toggle for lidar -->

      <remap from="odom"       to="/zed2/zed_node/odom"/> <!-- odometry/filtered -->
      
      <remap from="rgbd_image" to="rgbd_image"/>
      <remap from="scan_cloud" to="/os1_cloud_node/points"/>

      <param name="queue_size"  type="int"  value="10"/>
      <param name="approx_sync" type="bool" value="true"/>

      <param name="cloud_voxel_size" type="double" value=".03"/>
      <param name="cloud_output_voxelized" type="bool" value="false"/>

      <param name="Grid/RangeMax" type="double" value="3"/>
      <param name="Vis/MaxDepth" type="double" value=".5"/>

      <!-- RTAB-Map's parameters -->
      <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>
      <param name="RGBD/ProximityBySpace"     type="string" value="true"/>
      <param name="RGBD/AngularUpdate"        type="string" value="0.01"/>
      <param name="RGBD/LinearUpdate"         type="string" value="0.01"/>
      <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>
</node>



	<node pkg="octomap_server" type="octomap_color_server_node" name="octomap_server"> <!-- changed type from octomap_server_node temporarily -->
		<!-- <param name="resolution" value="0.06" /> -->
    <param name="resolution" value="0.03" />
		<!-- removes automatic voxel coloring -->
		<param name="height_map" value="false" />
		<!-- custom coloring -->
    <param name="colored_map" value="true" />
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
    <param name="base_frame_id" type="string" value="base_link" />
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="10.0" />
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/cloud_map" /> <!-- /cloud_map is from rtabmap -->
	</node>

<!-- 
  <node pkg="spatio_temporal_voxel_layer" type="disinfection_map" name="disinfection_map"/>
 -->


<!-- 
<node pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
  </node>
 -->

  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find dingo)/rviz/rtab_map_settings.rviz" output="screen"/>
   <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
    <remap from="rgb/image"       to="/data_throttled_image"/>
    <remap from="depth/image"     to="/data_throttled_image_depth"/>
    <remap from="rgb/camera_info" to="/data_throttled_camera_info"/>
    <remap from="cloud"           to="voxel_cloud" />

    <param name="rgb/image_transport"   type="string" value="compressed"/>
    <param name="depth/image_transport" type="string" value="compressedDepth"/>

    <param name="queue_size" type="int" value="10"/>
    <param name="voxel_size" type="double" value="0.01"/>
  </node>




   <!-- publish joint states-->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="true"/>
  </node>

  <!-- send urdf to param server - makes urdf from .xacro file-->
  <param name="urdf" command="$(find xacro)/xacro --inorder '$(find dingo)/urdf/dingo.xacro'" />

    <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find dingo)/launch/dingo_control.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
	output="screen" ns="/robot" args="joint_state_controller
					  front_left_velocity_controller
					  front_right_velocity_controller
					  back_left_velocity_controller
					  back_right_velocity_controller
					  back_left_position_controller
					  back_right_position_controller
					  front_left_position_controller
					  front_right_position_controller"/>

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
	respawn="false" output="screen">
    
  </node>

<!-- Find my robot Description-->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find dingo)/urdf/dingo.xacro'"/>

     <!-- creates static tf between the gazebo_dingo_frame published by the gazebo_odom_publisher and the robot_footprint so the robot can be visualized in rviz -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster" args="-.7 0 -.55 0 0 0 1 base_link robot_footprint" />



  

</launch>
